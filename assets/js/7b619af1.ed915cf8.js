"use strict";(self.webpackChunkrushjs_io=self.webpackChunkrushjs_io||[]).push([[2823],{5242:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>u});var r=n(3929);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),h=c(n),u=o,m=h["".concat(l,".").concat(u)]||h[u]||p[u]||s;return n?r.createElement(m,a(a({ref:t},d),{},{components:n})):r.createElement(m,a({ref:t},d))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,a=new Array(s);a[0]=h;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,a[1]=i;for(var c=2;c<s;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},8097:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>c,toc:()=>p});var r=n(394),o=n(1614),s=(n(3929),n(5242)),a=["components"],i={title:"rush build"},l=void 0,c={unversionedId:"pages/commands/rush_build",id:"pages/commands/rush_build",title:"rush build",description:"See also",source:"@site/docs/pages/commands/rush_build.md",sourceDirName:"pages/commands",slug:"/pages/commands/rush_build",permalink:"/pages/commands/rush_build",editUrl:"https://github.com/microsoft/rushstack-websites/tree/main/websites/rushjs.io/docs/pages/commands/rush_build.md",tags:[],version:"current",frontMatter:{title:"rush build"},sidebar:"docsSidebar",previous:{title:"rush add",permalink:"/pages/commands/rush_add"},next:{title:"rush change",permalink:"/pages/commands/rush_change"}},d={},p=[{value:"See also",id:"see-also",level:2}],h={toc:p};function u(e){var t=e.components,n=(0,o.Z)(e,a);return(0,s.kt)("wrapper",(0,r.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'usage: rush build [-h] [-p COUNT] [-t PROJECT] [-T PROJECT] [-f PROJECT]\n                  [-o PROJECT] [-i PROJECT] [-I PROJECT]\n                  [--to-version-policy VERSION_POLICY_NAME]\n                  [--from-version-policy VERSION_POLICY_NAME] [-v] [-c]\n                  [--ignore-hooks]\n\n\nThis command is similar to "rush rebuild", except that "rush build" performs\nan incremental build. In other words, it only builds projects whose source\nfiles have changed since the last successful build. The analysis requires a\nGit working tree, and only considers source files that are tracked by Git and\nwhose path is under the project folder. (For more details about this\nalgorithm, see the documentation for the "package-deps-hash" NPM package.)\nThe incremental build state is tracked in a per-project folder called ".\nrush/temp" which should NOT be added to Git. The build command is tracked by\nthe "arguments" field in the "package-deps_build.json" file contained\ntherein; a full rebuild is forced whenever the command has changed (e.g.\n"--production" or not).\n\nOptional arguments:\n  -h, --help            Show this help message and exit.\n  -p COUNT, --parallelism COUNT\n                        Specifies the maximum number of concurrent processes\n                        to launch during a build. The COUNT should be a\n                        positive integer or else the word "max" to specify a\n                        count that is equal to the number of CPU cores. If\n                        this parameter is omitted, then the default value\n                        depends on the operating system and number of CPU\n                        cores. This parameter may alternatively be specified\n                        via the RUSH_PARALLELISM environment variable.\n  -t PROJECT, --to PROJECT\n                        Normally all projects in the monorepo will be\n                        processed; adding this parameter will instead select\n                        a subset of projects. Each "--to" parameter expands\n                        this selection to include PROJECT and all its\n                        dependencies. "." can be used as shorthand for the\n                        project in the current working directory. For details,\n                         refer to the website article "Selecting subsets of\n                        projects".\n  -T PROJECT, --to-except PROJECT\n                        Normally all projects in the monorepo will be\n                        processed; adding this parameter will instead select\n                        a subset of projects. Each "--to-except" parameter\n                        expands this selection to include all dependencies of\n                        PROJECT, but not PROJECT itself. "." can be used as\n                        shorthand for the project in the current working\n                        directory. For details, refer to the website article\n                        "Selecting subsets of projects".\n  -f PROJECT, --from PROJECT\n                        Normally all projects in the monorepo will be\n                        processed; adding this parameter will instead select\n                        a subset of projects. Each "--from" parameter expands\n                        this selection to include PROJECT and all projects\n                        that depend on it, plus all dependencies of this set.\n                        "." can be used as shorthand for the project in the\n                        current working directory. For details, refer to the\n                        website article "Selecting subsets of projects".\n  -o PROJECT, --only PROJECT\n                        Normally all projects in the monorepo will be\n                        processed; adding this parameter will instead select\n                        a subset of projects. Each "--only" parameter expands\n                        this selection to include PROJECT; its dependencies\n                        are not added. "." can be used as shorthand for the\n                        project in the current working directory. Note that\n                        this parameter is "unsafe" as it may produce a\n                        selection that excludes some dependencies. For\n                        details, refer to the website article "Selecting\n                        subsets of projects".\n  -i PROJECT, --impacted-by PROJECT\n                        Normally all projects in the monorepo will be\n                        processed; adding this parameter will instead select\n                        a subset of projects. Each "--impacted-by" parameter\n                        expands this selection to include PROJECT and any\n                        projects that depend on PROJECT (and thus might be\n                        broken by changes to PROJECT). "." can be used as\n                        shorthand for the project in the current working\n                        directory. Note that this parameter is "unsafe" as it\n                        may produce a selection that excludes some\n                        dependencies. For details, refer to the website\n                        article "Selecting subsets of projects".\n  -I PROJECT, --impacted-by-except PROJECT\n                        Normally all projects in the monorepo will be\n                        processed; adding this parameter will instead select\n                        a subset of projects. Each "--impacted-by-except"\n                        parameter works the same as "--impacted-by" except\n                        that PROJECT itself is not added to the selection. ".\n                        " can be used as shorthand for the project in the\n                        current working directory. Note that this parameter\n                        is "unsafe" as it may produce a selection that\n                        excludes some dependencies. For details, refer to the\n                        website article "Selecting subsets of projects".\n  --to-version-policy VERSION_POLICY_NAME\n                        Normally all projects in the monorepo will be\n                        processed; adding this parameter will instead select\n                        a subset of projects. The "--to-version-policy"\n                        parameter is equivalent to specifying "--to" for each\n                        of the projects belonging to VERSION_POLICY_NAME. For\n                        details, refer to the website article "Selecting\n                        subsets of projects".\n  --from-version-policy VERSION_POLICY_NAME\n                        Normally all projects in the monorepo will be\n                        processed; adding this parameter will instead select\n                        a subset of projects. The "--from-version-policy"\n                        parameter is equivalent to specifying "--from" for\n                        each of the projects belonging to VERSION_POLICY_NAME.\n                         For details, refer to the website article "Selecting\n                        subsets of projects".\n  -v, --verbose         Display the logs during the build, rather than just\n                        displaying the build status summary\n  -c, --changed-projects-only\n                        Normally the incremental build logic will rebuild\n                        changed projects as well as any projects that\n                        directly or indirectly depend on a changed project.\n                        Specify "--changed-projects-only" to ignore dependent\n                        projects, only rebuilding those projects whose files\n                        were changed. Note that this parameter is "unsafe";\n                        it is up to the developer to ensure that the ignored\n                        projects are okay to ignore.\n  --ignore-hooks        Skips execution of the "eventHooks" scripts defined\n                        in rush.json. Make sure you know what you are\n                        skipping.\n')),(0,s.kt)("h2",{id:"see-also"},"See also"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"../../developer/selecting_subsets"},"Selecting subsets of projects")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"../../commands/rush_rebuild"},"rush rebuild"))))}u.isMDXComponent=!0}}]);